module SimplePDL2PetriNet;
create OUT: petrinet from  IN: simplepdl;

-- Obtenir le processus qui contient ce process element.
-- Remarque: Ce helper ne serait pas utile si une r�f�rence opposite
-- avait �t� plac�e entre Process et ProcessElement
helper context simplepdl!ProcessElement
def: getProcess(): simplepdl!Process =
	simplepdl!Process.allInstances()
		->select(p | p.processElements->includes(self))
		->asSequence()->first();

-- Obtenir les paramètre qui accèdent à cette resources.
-- Remarque: Ce helper ne serait pas utile si une r�f�rence opposite
-- avait �t� plac�e entre Process et ProcessElement
helper context simplepdl!Resource
def: getProcess(): simplepdl!Process =
	simplepdl!Process.allInstances()
		->select(p | p.resources->includes(self))
		->asSequence()->first();

-- Obtenir la WorkDefinition qui a ce paramètre.
-- Remarque: Ce helper ne serait pas utile si une r�f�rence opposite
-- avait �t� plac�e entre Process et ProcessElement
helper context simplepdl!Parameter
def: getWorkDefinition(): simplepdl!WorkDefinition =
	simplepdl!WorkDefinition.allInstances()
		->select(wd | wd.needs->includes(self))
		->asSequence()->first();

-- Traduire un Process en un PetriNet de m�me nom
rule Process2PetriNet {
	from p: simplepdl!Process
	to pn: petrinet!PetriNet (
		name <- p.name),
		p_running: petrinet!Place(
				name <- p.name + '_running',
				marking <- 1,
				net <- p),
		p_finished: petrinet!Place(
				name <- p.name + '_finished',
				marking <- 0,
				net <- p),
		-- TRANSITION d'une WorkDefinition
		t_finish: petrinet!Transition(
				name <- p.name + '_finish',
				min_time <- p.max_time,
				max_time <- p.max_time,
				net <- p),
		-- ARCS d'une WorkDefinition
		a_rf: petrinet!Arc(
				source <- p_running,
				target <- t_finish,
				weight <- 1,
				kind <- #normal,
				net <- p),
		a_ff: petrinet!Arc(
				source <- t_finish,
				target <- p_finished,
				weight <- 1,
				kind <- #normal,
				net <- p),
		-- Prise en compte du temps
			-- Places
			p_initial: petrinet!Place(
					name <- p.name + '_initial',
					marking <- 1,
					net <- p),
			p_onTime: petrinet!Place(
					name <- p.name + '_onTime',
					marking <- 0,
					net <- p),
			p_tooEarly: petrinet!Place(
					name <- p.name + '_tooEarly',
					marking <- 0,
					net <- p),
			p_tooLate: petrinet!Place(
					name <- p.name + '_tooLate',
					marking <- 0,
					net <- p),
			-- transitions
			t_onTime: petrinet!Transition(
					name <- p.name + '_beginOnTime',
					min_time <- p.min_time,
					max_time <- p.min_time,
					net <- p),
			t_tooEarly: petrinet!Transition(
					name <- p.name + '_isTooEarly',
					min_time <- 0,
					max_time <- 0,
					net <- p),
			t_tooLate: petrinet!Transition(
					name <- p.name + '_isTooLate',
					min_time <- 0,
					max_time <- 0,
					net <- p),
			-- arcs
			a_itE: petrinet!Arc(
				source <- p_initial,
				target <- t_tooEarly,
				weight <- 1,
				kind <- #normal,
				net <- p),
			a_tEtE: petrinet!Arc(
				source <- t_tooEarly,
				target <- p_tooEarly,
				weight <- 1,
				kind <- #normal,
				net <- p),
			a_ioT: petrinet!Arc(
				source <- p_initial,
				target <- t_onTime,
				weight <- 1,
				kind <- #normal,
				net <- p),
			a_oToT: petrinet!Arc(
				source <- t_onTime,
				target <- p_onTime,
				weight <- 1,
				kind <- #normal,
				net <- p),
			a_oTtL: petrinet!Arc(
				source <- p_onTime,
				target <- t_tooLate,
				weight <- 1,
				kind <- #normal,
				net <- p),
			a_tLtL: petrinet!Arc(
				source <- t_tooLate,
				target <- p_tooLate,
				weight <- 1,
				kind <- #normal,
				net <- p),
			a_roT: petrinet!Arc(
				source <- p_running,
				target <- t_onTime,
				weight <- 1,
				kind <- #read_arc,
				net <- p),
			a_rtL: petrinet!Arc(
				source <- p_running,
				target <- t_tooLate,
				weight <- 1,
				kind <- #read_arc,
				net <- p),
			a_ftE: petrinet!Arc(
				source <- p_finished,
				target <- t_tooEarly,
				weight <- 1,
				kind <- #read_arc,
				net <- p)
}

-- Traduire une WorkDefinition en un arc sur le réseau de Petri
rule WorkSequence2PetriNet {
	from ws: simplepdl!WorkSequence
	to 
		a_ws: petrinet!Arc (
			kind <- #read_arc,
			weight <- 1,
			source <- if ((ws.linkType = #finishToStart) or (ws.linkType = #finishToFinish))
							then thisModule.resolveTemp(ws.predecessor, 'p_finished')
					  else thisModule.resolveTemp(ws.predecessor, 'p_started')
					  endif,
			target <- if ((ws.linkType = #finishToStart) or (ws.linkType = #startToStart))
							then thisModule.resolveTemp(ws.successor , 't_start')
					  else thisModule.resolveTemp(ws.successor , 't_finish')
					  endif,
			net <- ws.getProcess())
}

-- Traduire une WorkDefinition en un motif sur le r�seau de Petri
rule WorkDefinition2PetriNet {
	from wd: simplepdl!WorkDefinition
	to
		-- PLACES d'une WorkDefinition
		p_ready: petrinet!Place(
				name <- wd.name + '_ready',
				marking <- 1,
				net <- wd.getProcess()),
		p_started: petrinet!Place(
				name <- wd.name + '_started',
				marking <- 0,
				net <- wd.getProcess()),
		p_running: petrinet!Place(
				name <- wd.name + '_running',
				marking <- 0,
				net <- wd.getProcess()),
		p_finished: petrinet!Place(
				name <- wd.name + '_finished',
				marking <- 0,
				net <- wd.getProcess()),
		-- TRANSITION d'une WorkDefinition				
		t_start: petrinet!Transition(
				name <- wd.name + '_start',
				min_time <- 0,
				max_time <- 0,
				net <- wd.getProcess()),
		t_finish: petrinet!Transition(
				name <- wd.name + '_finish',
				min_time <- wd.max_time,
				max_time <- wd.max_time,
				net <- wd.getProcess()),
		-- ARCS d'une WorkDefinition				
		a_rs: petrinet!Arc(
				source <- p_ready,
				target <- t_start,
				weight <- 1,
				kind <- #normal,
				net <- wd.getProcess()),
		a_ss: petrinet!Arc(
				source <- t_start,
				target <- p_started,
				weight <- 1,
				kind <- #normal,
				net <- wd.getProcess()),
		a_sr: petrinet!Arc(
				source <- t_start,
				target <- p_running,
				weight <- 1,
				kind <- #normal,
				net <- wd.getProcess()),
		a_rf: petrinet!Arc(
				source <- p_running,
				target <- t_finish,
				weight <- 1,
				kind <- #normal,
				net <- wd.getProcess()),
		a_ff: petrinet!Arc(
				source <- t_finish,
				target <- p_finished,
				weight <- 1,
				kind <- #normal,
				net <- wd.getProcess()),
		a_fp_f: petrinet!Arc(
				source <- p_finished,
				target <- thisModule.resolveTemp(wd.getProcess(), 't_finish'),
				weight <- 1,
				kind <- #read_arc,
				net <- wd.getProcess()),
		-- Prise en compte du temps
			-- Places
			p_initial: petrinet!Place(
					name <- wd.name + '_initial',
					marking <- 0,
					net <- wd.getProcess()),
			p_onTime: petrinet!Place(
					name <- wd.name + '_onTime',
					marking <- 0,
					net <- wd.getProcess()),
			p_tooEarly: petrinet!Place(
					name <- wd.name + '_tooEarly',
					marking <- 0,
					net <- wd.getProcess()),
			p_tooLate: petrinet!Place(
					name <- wd.name + '_tooLate',
					marking <- 0,
					net <- wd.getProcess()),
			-- transitions
			t_onTime: petrinet!Transition(
					name <- wd.name + '_beginOnTime',
					min_time <- wd.min_time,
					max_time <- wd.min_time,
					net <- wd.getProcess()),
			t_tooEarly: petrinet!Transition(
					name <- wd.name + '_isTooEarly',
					min_time <- 0,
					max_time <- 0,
					net <- wd.getProcess()),
			t_tooLate: petrinet!Transition(
					name <- wd.name + '_isTooLate',
					min_time <- 0,
					max_time <- 0,
					net <- wd.getProcess()),
			-- arcs
			a_si: petrinet!Arc(
				source <- t_start,
				target <- p_initial,
				weight <- 1,
				kind <- #normal,
				net <- wd.getProcess()),
			a_itE: petrinet!Arc(
				source <- p_initial,
				target <- t_tooEarly,
				weight <- 1,
				kind <- #normal,
				net <- wd.getProcess()),
			a_tEtE: petrinet!Arc(
				source <- t_tooEarly,
				target <- p_tooEarly,
				weight <- 1,
				kind <- #normal,
				net <- wd.getProcess()),
			a_ioT: petrinet!Arc(
				source <- p_initial,
				target <- t_onTime,
				weight <- 1,
				kind <- #normal,
				net <- wd.getProcess()),
			a_oToT: petrinet!Arc(
				source <- t_onTime,
				target <- p_onTime,
				weight <- 1,
				kind <- #normal,
				net <- wd.getProcess()),
			a_otL: petrinet!Arc(
				source <- p_onTime,
				target <- t_tooLate,
				weight <- 1,
				kind <- #normal,
				net <- wd.getProcess()),
			a_tLtL: petrinet!Arc(
				source <- t_tooLate,
				target <- p_tooLate,
				weight <- 1,
				kind <- #normal,
				net <- wd.getProcess()),
			a_ro: petrinet!Arc(
				source <- p_running,
				target <- t_onTime,
				weight <- 1,
				kind <- #read_arc,
				net <- wd.getProcess()),
			a_rtL: petrinet!Arc(
				source <- p_running,
				target <- t_tooLate,
				weight <- 1,
				kind <- #read_arc,
				net <- wd.getProcess()),
			a_ftE: petrinet!Arc(
				source <- p_finished,
				target <- t_tooEarly,
				weight <- 1,
				kind <- #read_arc,
				net <- wd.getProcess())
		
}

--Prise en compte des resources

rule Resource2PetriNet {
	from res: simplepdl!Resource
	to
		p_resource: petrinet!Place(
				name <- res.name,
				marking <- res.marking,
				net <- res.getProcess())
}

rule Parameter2PetriNet {
	from par: simplepdl!Parameter
	to
		-- Arcs d'un Paramètre
		a_pr: petrinet!Arc(
				source <- thisModule.resolveTemp(par.getWorkDefinition(), 't_finish'),
				target <- thisModule.resolveTemp(par.resource, 'p_resource'),
				weight <- par.nbNeeds,
				kind <- #normal,
				net <- par.getProcess()),
		a_rp: petrinet!Arc(
				source <- thisModule.resolveTemp(par.resource, 'p_resource'),
				target <- thisModule.resolveTemp(par.getWorkDefinition(), 't_start'),
				weight <- par.nbNeeds,
				kind <- #normal,
				net <- par.getProcess())
}